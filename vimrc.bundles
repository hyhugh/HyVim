" ==========================================
" bundle settings
" ==========================================

"------------------------------------------- begin of configs --------------------------------------------

set nocompatible
filetype off " required! turn off

" ----------------------------------------------------------------------------
" vim plugin bundle control, command model
" ----------------------------------------------------------------------------

call plug#begin('~/.vim/bundle')

" fuzzy search plugin
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

"vim-snippets and ultisnips
Plug 'honza/vim-snippets'
Plug 'junegunn/vim-easy-align'
Plug 'antoinemadec/coc-fzf'

Plug 'mattn/emmet-vim'

" semantic autocompleting
Plug 'neoclide/coc.nvim', {'branch':'release'}

" debug support
Plug 'puremourning/vimspector', {'do': './install_gadget.py --basedir $HOME/HyVim/vimspector-config --enable-c --update-gadget-config'}

" LSP symbol navigator
Plug 'liuchengxu/vista.vim'

" symbol autocompleting
Plug 'hyhugh/auto-pairs'
" tags autocompleting
Plug 'alvan/vim-closetag'
" quick comment out
Plug 'scrooloose/nerdcommenter'
" for repeat -> enhance surround.vim, . to repeat command
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
" trailingwhitespace
Plug 'ntpeters/vim-better-whitespace'
" easymotion
Plug 'Lokaltog/vim-easymotion'
" quickscope
Plug 'unblevable/quick-scope'
" signature
Plug 'kshenoy/vim-signature'
" quick selection and edit
Plug 'terryma/vim-expand-region'
" multiplecursors
Plug 'mg979/vim-visual-multi'
" quickrun
Plug 'thinca/vim-quickrun'
" mundo
Plug 'simnalamburt/vim-mundo'
" lightline
Plug 'itchyny/lightline.vim'
" rainbow_parentheses
Plug 'luochen1990/rainbow'
" solarized
Plug 'altercation/vim-colors-solarized'
Plug 'overcache/NeoSolarized'
Plug 'morhetz/gruvbox'
" nerdtree nerdtreetabs
Plug 'scrooloose/nerdtree' | Plug 'jistr/vim-nerdtree-tabs' 
" async open file suppoort
Plug 'Shougo/vimproc.vim', {'do' : 'make'}
Plug 'hyhugh/nerdtree-async-xdg-open.vim' 
" text object
Plug 'kana/vim-textobj-user'
" line object : l   dal yal cil
Plug 'kana/vim-textobj-line'
" entire object : e   dae yae cie
Plug 'kana/vim-textobj-entire'
" indent object: i   dai yai cii
Plug 'kana/vim-textobj-indent'
" tmux suppoort
Plug 'christoomey/vim-tmux-navigator'

" extra syntax {{{
" Plug 'justinmk/vim-syntax-extra'
Plug 'hail2u/vim-css3-syntax'
Plug 'harenome/vim-mipssyntax'
Plug 'ARM9/arm-syntax-vim'
" }}}

" ctrlsf
Plug 'dyng/ctrlsf.vim'

"bazel support
Plug 'google/vim-maktaba'
Plug 'bazelbuild/vim-bazel'

" esay-easyescape
Plug 'hyhugh/vim-easyescape-plus'
" markdown support
" If you don't have nodejs and yarn
" use pre build, add 'vim-plug' to the filetype list so vim-plug can update this plugin
" see: https://github.com/iamcco/markdown-preview.nvim/issues/50
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }}
" latex support
Plug 'lervag/vimtex'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

call plug#end()


" ################### Configurations ######################
"
" NeoSolarized {{{
" This is only necessary if you use "set termguicolors".
" let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
" let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
set termguicolors
set background=dark
" set t_Co=256
" colorscheme NeoSolarized
colorscheme gruvbox

if has('nvim')
    " set pb=34
    " set winbl=34
endif
" default value is "normal", Setting this option to "high" or "low" does use the
" same Solarized palette but simply shifts some values up or down in order to
" expand or compress the tonal range displayed.
let g:neosolarized_contrast = "normal"

" Special characters such as trailing whitespace, tabs, newlines, when displayed
" using ":set list" can be set to one of three levels depending on your needs.
" Default value is "normal". Provide "high" and "low" options.
let g:neosolarized_visibility = "normal"

" I make vertSplitBar a transparent background color. If you like the origin solarized vertSplitBar
" style more, set this value to 0.
let g:neosolarized_vertSplitBgTrans = 1

" If you wish to enable/disable NeoSolarized from displaying bold, underlined or italicized
" typefaces, simply assign 1 or 0 to the appropriate variable. Default values:
let g:neosolarized_bold = 1
let g:neosolarized_underline = 1
let g:neosolarized_italic = 1
" }}}

" ################### AutoCompletion ###################
" coc {{{
let g:coc_global_extensions = [
            \'coc-git',
            \'coc-snippets',
            \'coc-highlight',
            \'coc-emmet',
            \'coc-yank',
            \'coc-lists',
            \'coc-json',
            \'coc-clangd',
            \]
" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
" autocmd FileType * let b:coc_root_patterns = ['.']
  " let g:coc_node_args = ['--nolazy', '--inspect-brk=6045']
autocmd FileType python let b:coc_root_patterns = ['.pyroot']
autocmd FileType list set nonumber
autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')

inoremap <silent><expr> <TAB>
            \ pumvisible() ? "\<C-n>" :
            \ <SID>check_back_space() ? "\<TAB>" :
            \ coc#refresh()

function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
inoremap <silent><expr> <c-space> coc#refresh()
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)
nmap <silent> <leader>gd <Plug>(coc-definition)
nmap <silent> <leader>gt <Plug>(coc-type-definition)
nmap <silent> <leader>gi <Plug>(coc-implementation)
nmap <silent> <leader>gr <Plug>(coc-references)
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
    if &filetype == 'vim'
        execute 'h '.expand('<cword>')
    else
        call CocAction('doHover')
    endif
endfunction
nmap <leader>jr <Plug>(coc-rename)
vmap <leader>m  <Plug>(coc-format-select)
nmap <silent> <leader>m  <Plug>(coc-format)

vmap <leader>ja  <Plug>(coc-codeaction-selected)
nmap <leader>ja  <Plug>(coc-codeaction)
nmap <leader>jf  <Plug>(coc-fix-current)

nnoremap <silent> <leader>ll  :<C-u>CocFzfList<cr>
nnoremap <silent> <leader>lc  :<C-u>CocFzfList commits<cr>
nnoremap <silent> <leader>lg  :<C-u>CocFzfList gstatus<cr>
nnoremap <silent> <c-space>  :<C-u>CocList --normal mru<cr>
nnoremap <silent> <leader>ln  :<C-u>CocFzfList branches<cr>

nnoremap <silent> <leader>ld  :<C-u>CocFzfList diagnostics<cr>
nnoremap <silent> <leader>le  :<C-u>CocFzfList extensions<cr>
nnoremap <silent> <leader>la  :<C-u>CocFzfList commands<cr>
nnoremap <silent> <leader>lo  :<C-u>CocFzfList outline<cr>
nnoremap <silent> <leader>ls  :<C-u>CocFzfList symbols<cr>
nnoremap <silent> <leader>lz  :<C-u>CocFzfListResume<cr>

nnoremap <silent> <leader>lj  :<C-u>CocNext<CR>
nnoremap <silent> <leader>lk  :<C-u>CocPrev<CR>
nnoremap <silent> <leader>lp  :<C-u>CocListResume<CR>

imap <C-y> <Plug>(coc-snippets-expand)

" use c-d to expand the snippets and emmets
" HACK: currently coc-emmets requires coc#_select_confirm to expand an emmet
" snippet
inoremap <silent><expr> <c-d> pumvisible() ? coc#_select_confirm() : "<C-y>"

" Use <C-j> for select text for visual placeholder of snippet.
vmap <C-j> <Plug>(coc-snippets-select)
" Use <C-j> for jump to next placeholder, it's default of coc.nvim
let g:coc_snippet_next = '<c-j>'
" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<c-k>'

command! -nargs=0 Format :call CocAction('format')
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Use <C-j> for both expand and jump (make expand higher priority.)
imap <C-j> <Plug>(coc-snippets-expand-jump)

autocmd CursorHold * silent call CocActionAsync('highlight')
" HACK: add an argument to avoid overwrite command history
autocmd CursorHold * silent CocCommand git.refresh "void"
highlight CocHighlightText ctermbg=14 guibg=#033a48

" navigate chunks of current buffer
nmap [g <Plug>(coc-git-prevchunk)
nmap ]g <Plug>(coc-git-nextchunk)
" show chunk diff at current position
nmap <leader>gs <Plug>(coc-git-chunkinfo)
" show commit contains current position
nmap <leader>gc <Plug>(coc-git-commit)
" }}}

" closetag {{{
let g:closetag_filenames = '*.html,*.xhtml,*.phtml'
" }}}

" nerdcommenter {{{
let g:NERDSpaceDelims=1
let g:NERDAltDelims_python = 1
let g:NERDCustomDelimiters = { 'typescript.tsx': { 'left': '{/*','right': '*/}' } }
" }}}

" trailingwhitespace {{{
let g:better_whitespace_filetypes_blacklist=['ctrlsf', 'vim']
map <leader><leader>s :StripWhitespace<cr>
" }}}
" ################### 快速移动 ###################

" easymotion {{{
let g:EasyMotion_smartcase = 1
"let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
map <Leader><leader>h <Plug>(easymotion-linebackward)
map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
map <Leader><leader>l <Plug>(easymotion-lineforward)

map <Leader><leader>. <Plug>(easymotion-repeat)
" }}}

" quickscope {{{
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
" }}}

" expandregion {{{
vmap J <Plug>(expand_region_expand)
vmap K <Plug>(expand_region_shrink)

" Extend the global default
call expand_region#custom_text_objects({
            \ 'a]' :1,
            \ 'ab' :1,
            \ 'aB' :1,
            \ 'ii' :0,
            \ 'ai' :0,
            \ })
" }}}

" mundo {{{
noremap <leader>h :MundoToggle<CR>
set undofile
set undodir=~/.vim/undo
" }}}

" lightline {{{
 
function! CocCurrentFunction()
    return get(b:, 'coc_current_function', '')
endfunction

function! LightlineGitBlame() abort
  let blame = get(b:, 'coc_git_blame', '')
  " return blame
  return winwidth(0) > 120 ? blame : ''
endfunction

" lightline
let g:lightline = {
  \ 'colorscheme': 'gruvbox',
  \ 'active': {
  \   'left': [
  \     [ 'mode', 'paste' ],
  \     [ 'currentfunction', 'git', 'diagnostic', 'cocstatus', 'filename', 'method', 'modified' ]
  \   ],
  \   'right':[
  \     [ 'fileformat', 'fileencoding', 'filetype', 'lineinfo', 'percent' ],
  \     [ 'blame' ],
  \   ],
  \ },
  \ 'component_function': {
  \   'cocstatus': 'coc#status',
  \   'currentfunction': 'CocCurrentFunction',
  \   'blame': 'LightlineGitBlame',
  \ }
\ }
" }}}

" rainbow_parentheses {{{
let g:rainbow_active = 1

let g:rainbow_conf = {
            \   'guifgs': ['royalblue3', 'seagreen3', 'darkorchid3', 'firebrick3'],
            \   'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
            \   'operators': '_,_',
            \   'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
            \   'separately': {
            \       '*': {},
            \       'tex': {
            \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
            \       },
            \       'lisp': {
            \           'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
            \       },
            \       'vim': {
            \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
            \       },
            \       'html': {
            \           'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
            \       },
            \       'css': 0,
            \       'cmake': 0,
            \       'terraform': 0,
            \   }
            \}
" }}}

" nerdtree nerdtreetabs {{{
let NERDTreeHighlightCursorline=1
let NERDTreeMinimalMenu=1
let NERDTreeHijackNetrw=1
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$', '\.class$', '^__pycache__$' ]

"close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end

let g:NERDTreeMapOpenSplit = 's'
let g:NERDTreeMapOpenVSplit = 'v'
let g:NERDTreeWinPos = "right"

nnoremap <silent> <leader>g :NERDTreeFind<cr>
nnoremap <silent> <leader>n :NERDTreeFocus<cr>
autocmd FileType nerdtree nnoremap <buffer> <leader>n <c-w><c-p>
" }}}

" nerdtreetabs {{{
map <leader><F8> <plug>NERDTreeTabsToggle<CR>
" 关闭同步
" let g:nerdtree_tabs_synchronize_view=0
" let g:nerdtree_tabs_synchronize_focus=0
let g:nerdtree_tabs_open_on_console_startup=0
let g:nerdtree_tabs_open_on_gui_startup=0
" }}}

" FZF {{{
au FileType fzf set nonu nornu
nnoremap <leader>. :Tags<cr>
nnoremap <leader>> :Tags <C-R><C-W><CR>
nnoremap <leader>f :RG<CR>
nnoremap <Leader>F :RG <C-R><C-W><CR>
nnoremap <leader>b :BLines <CR>
nnoremap <leader>B :BLines <C-R><C-W><cr>
nnoremap <leader>p :Files <CR>

function! RipgrepFzf(query, fullscreen)
  let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let options = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  let options = fzf#vim#with_preview(options, 'up:40%', 'ctrl-/')
  call fzf#vim#grep(initial_command, 1, options, a:fullscreen)
endfunction

command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)

let g:fzf_buffers_jump = 1
let g:fzf_tags_command = 'ctags -R'

let g:fzf_preview_window = ['up:40%', 'ctrl-/']
" }}}

" pythonsyntax {{{
let python_highlight_all = 1
" }}}

" markdown {{{
let g:vim_markdown_folding_disabled=1
" let g:instant_markdown_autostart = 0
" }}}

" javascript {{{
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"
" }}}

" json {{{
let g:vim_json_syntax_conceal = 0
" }}}

" golang support {{{
let g:go_fmt_autosave = 0
" }}}

" vim latex{{{
let g:vimtex_mappings_enabled = 0
let g:vimtex_view_automatic = 1
let g:tex_flavor = 'latex'
let g:vimtex_disable_version_warning = 1
let g:vimtex_compiler_latexmk = {
            \ 'build_dir' : '',
            \ 'callback' : 0,
            \ 'continuous' : 1,
            \ 'executable' : 'latexmk',
            \ 'hooks' : [],
            \ 'options' : [
            \   '-verbose',
            \   '-shell-escape',
            \   '-file-line-error',
            \   '-synctex=1',
            \   '-interaction=nonstopmode',
            \ ],
            \}

if has('unix')
    let g:vimtex_view_general_viewer = 'okular'
    let g:vimtex_view_general_options = '--noraise --unique file:@pdf\#src:@line@tex'
else
    let g:vimtex_view_general_viewer = 'skim'
endif

" }}}
"
"" ctrlsf {{{
let g:ctrlsf_search_mode = 'async'
nmap \ <Plug>CtrlSFCwordPath<CR>
nmap <leader>\ :CtrlSF 
let g:ctrlsf_auto_focus = {
            \ "at" : "start",
            \}
let g:ctrlsf_position = 'bottom'
" let g:ctrlsf_winsize = '30%'
let g:ctrlsf_auto_close = 0
let g:ctrlsf_confirm_save = 0
let g:ctrlsf_ackprg = 'rg'
let g:ctrlsf_case_sensitive = 'smart'
let g:ctrlsf_ignore_dir = ['tags']
" }}}

"" vim easyescape {{{
let g:easyescape_string = "kj"
let g:easyescape_timeout = 300
"}}}

"" vim autopairs {{{
let g:AutoPairsShortcutFastWrap = "<C-e>"
let g:AutoPairsShortcutJump = '<C-l>'
let g:AutoPairsShortcutJumpBack = '<C-h>'
let g:AutoPairsMultilineClose = 0
"}}}

" vim-css3-syntax {{{
augroup VimCSS3Syntax
    autocmd!
    autocmd FileType css setlocal iskeyword+=-
augroup END
"}}}

" typescript {{{
let g:vim_jsx_pretty_colorful_config = 1
"}}}

" easy-align {{{
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
" }}}
" quickrun {{{
let g:quickrun_config = {}
let g:quickrun_config['_'] = {
            \'runner': 'vimproc',
            \}

let g:quickrun_config.cpp = {
    \   'command': 'c++',
    \   'exec': ['%c %o %s --std=c++17 -o %s:p:r', '%s:p:r %a', 'rm -f %s:p:r'],
    \ }
" }}}
" 
" vimspector {{{
let g:vimspector_base_dir=expand( '$HOME/HyVim/vimspector-config' )
let g:vimspector_enable_mappings = 'HUMAN'
map <leader>dw :VimspectorWatch 
map <leader>dr :VimspectorReset
augroup WrapLineInVimspector
    autocmd!
    autocmd BufRead,BufEnter vimspector.Variables  setlocal wrap
    autocmd BufRead,BufEnter vimspector.Watches  setlocal wrap
    autocmd BufRead,BufEnter vimspector.StackTrace  setlocal wrap
augroup END
" }}}

" markdown {
let g:mkdp_auto_close = 0
" }
"
" treesitter {{{
lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = { "javascript", "typescript", "java", "rust", "python", "cpp" }, -- one of "all", "maintained" (parsers with maintainers), or a list of languages
  highlight = {
    enable = true,              -- false will disable the whole extension
    disable = {},  -- list of language that will be disabled
    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
    -- Using this option may slow down your editor, and you may see some duplicate highlights.
    -- Instead of true it can also be a list of languages
    additional_vim_regex_highlighting = false,
  },
}
EOF
" }}}
" emmet {{{
autocmd FileType html,css,typescriptreact EmmetInstall
" }}}
" 

"------------------------------------------- end of configs --------------------------------------------
